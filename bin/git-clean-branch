#!/usr/bin/env bash

ALWAYS_HARDREMOVE="$1"

git fetch -p > /dev/null 2>&1
CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
CURRENT_BRANCH_IS_GONE=$(git branch -vv | awk '/: gone]/{print ($1 == "*") ? "y" : "n"}')

if [[ "$CURRENT_BRANCH_IS_GONE" == "y" ]]; then
  nicelog "Branch ${CURRENT_BRANCH} no longer exists in remote"

  MAIN_EXISTS=$(git branch | grep "main")
  DEVELOP_EXISTS=$(git branch | grep "develop")

  if [[ -n "$DEVELOP_EXISTS" ]]; then
    nicelog "Switching to develop"
    git pull origin develop > /dev/null 2>&1
    git switch develop > /dev/null 2>&1
  elif [[ -n "$MAIN_EXISTS" ]]; then
    nicelog "Switching to main"
    git pull origin main > /dev/null 2>&1
    git switch main > /dev/null 2>&1
  else
    nicelog "Switching to master"
    git pull origin master > /dev/null 2>&1
    git switch master > /dev/null 2>&1
  fi
fi

BRANCHES=$(git branch -vv | awk '/: gone]/{print ($1 == "*") ? $2 : $1}')
for branch in $BRANCHES; do
  nicelog "Removing branch $branch"
  result=$(git branch -d "${branch}")
  if [[ $result != *"Deleted branch $branch"* ]]; then
    if [[ $ALWAYS_HARDREMOVE == "y" ]]; then
      nicelog "Branch ${branch} does not exist in remote but does locally. Removing automatically"
      git branch -D "${branch}" > /dev/null 2>&1
      nicelog "Removed branch $branch"
    else
      nicelog "Failed to remove $branch, attempt with -D? (y/N)"
      read -r hardremove
      if [[ $hardremove == "Y" || $hardremove == "y" ]]; then
        git branch -D "${branch}" > /dev/null 2>&1
        nicelog "Removed branch $branch"
      fi
    fi
  else
    nicelog "Removed branch $branch"
  fi
done

git pull -q --stat --ff-only 
